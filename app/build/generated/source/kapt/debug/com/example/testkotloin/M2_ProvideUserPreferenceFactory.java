// Generated by Dagger (https://google.github.io/dagger).
package com.example.testkotloin;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class M2_ProvideUserPreferenceFactory implements Factory<UserPreference> {
  private final M2 module;

  private final Provider<Application> applicationProvider;

  public M2_ProvideUserPreferenceFactory(M2 module, Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public UserPreference get() {
    return provideInstance(module, applicationProvider);
  }

  public static UserPreference provideInstance(
      M2 module, Provider<Application> applicationProvider) {
    return proxyProvideUserPreference(module, applicationProvider.get());
  }

  public static M2_ProvideUserPreferenceFactory create(
      M2 module, Provider<Application> applicationProvider) {
    return new M2_ProvideUserPreferenceFactory(module, applicationProvider);
  }

  public static UserPreference proxyProvideUserPreference(M2 instance, Application application) {
    return Preconditions.checkNotNull(
        instance.provideUserPreference(application),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
