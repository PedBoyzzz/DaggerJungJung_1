// Generated by Dagger (https://google.github.io/dagger).
package com.example.testkotloin;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PreferenceModule_ProvideAwesomeManagerFactory
    implements Factory<AwesomeManager> {
  private final PreferenceModule module;

  private final Provider<InjectClass> cProvider;

  public PreferenceModule_ProvideAwesomeManagerFactory(
      PreferenceModule module, Provider<InjectClass> cProvider) {
    this.module = module;
    this.cProvider = cProvider;
  }

  @Override
  public AwesomeManager get() {
    return provideInstance(module, cProvider);
  }

  public static AwesomeManager provideInstance(
      PreferenceModule module, Provider<InjectClass> cProvider) {
    return proxyProvideAwesomeManager(module, cProvider.get());
  }

  public static PreferenceModule_ProvideAwesomeManagerFactory create(
      PreferenceModule module, Provider<InjectClass> cProvider) {
    return new PreferenceModule_ProvideAwesomeManagerFactory(module, cProvider);
  }

  public static AwesomeManager proxyProvideAwesomeManager(
      PreferenceModule instance, InjectClass c) {
    return Preconditions.checkNotNull(
        instance.provideAwesomeManager(c),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
