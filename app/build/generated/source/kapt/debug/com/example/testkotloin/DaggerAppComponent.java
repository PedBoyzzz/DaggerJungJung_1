// Generated by Dagger (https://google.github.io/dagger).
package com.example.testkotloin;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import androidx.fragment.app.Fragment;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<String> provideMyClassProvider;

  private Provider<MyClass> getMyClassProvider;

  private Provider<Integer> meProvider;

  private Provider<InjectClass> piProvider;

  private Provider<AwesomeManager> provideAwesomeManagerProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideUserContextProvider;

  private Provider<A> provideAwesomeManager2Provider;

  private Provider<UserPreference> provideUserPreferenceProvider;

  private Provider<Float> me2Provider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.provideMyClassProvider =
        DoubleCheck.provider(
            PreferenceModule_ProvideMyClassFactory.create(builder.preferenceModule));
    this.getMyClassProvider =
        DoubleCheck.provider(
            PreferenceModule_GetMyClassFactory.create(
                builder.preferenceModule, provideMyClassProvider));
    this.meProvider =
        DoubleCheck.provider(PreferenceModule_MeFactory.create(builder.preferenceModule));
    this.piProvider =
        DoubleCheck.provider(PreferenceModule_PiFactory.create(builder.preferenceModule));
    this.provideAwesomeManagerProvider =
        DoubleCheck.provider(
            PreferenceModule_ProvideAwesomeManagerFactory.create(
                builder.preferenceModule, piProvider));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideUserContextProvider =
        DoubleCheck.provider(
            PreferenceModule_ProvideUserContextFactory.create(
                builder.preferenceModule, applicationProvider));
    this.provideAwesomeManager2Provider =
        DoubleCheck.provider(
            PreferenceModule_ProvideAwesomeManager2Factory.create(
                builder.preferenceModule, provideUserContextProvider));
    this.provideUserPreferenceProvider =
        DoubleCheck.provider(
            M2_ProvideUserPreferenceFactory.create(builder.m2, applicationProvider));
    this.me2Provider = DoubleCheck.provider(AppModule_Me2Factory.create(builder.appModule));
  }

  @Override
  public void inject(MyApp myApp) {
    injectMyApp(myApp);
  }

  private MyApp injectMyApp(MyApp instance) {
    MyApp_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private PreferenceModule preferenceModule;

    private M2 m2;

    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (preferenceModule == null) {
        this.preferenceModule = new PreferenceModule();
      }
      if (m2 == null) {
        this.m2 = new M2();
      }
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityModule_ContributeMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder>
        homeFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return Collections
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              singletonMap(HomeFragment.class, (Provider) homeFragmentSubcomponentBuilderProvider);
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private Info getInfo() {
      return new Info(DaggerAppComponent.this.meProvider.get());
    }

    private Info2 getInfo2() {
      return new Info2(DaggerAppComponent.this.provideMyClassProvider.get());
    }

    private AppModule.Info3 getInfo3() {
      return new AppModule.Info3(DaggerAppComponent.this.meProvider.get());
    }

    private InjectClass2 getInjectClass2() {
      return new InjectClass2(DaggerAppComponent.this.piProvider.get());
    }

    private AwesomeManager2 getAwesomeManager2() {
      return new AwesomeManager2(DaggerAppComponent.this.provideUserPreferenceProvider.get());
    }

    private MainActivityViewModel getMainActivityViewModel() {
      return new MainActivityViewModel(DaggerAppComponent.this.me2Provider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.homeFragmentSubcomponentBuilderProvider =
          new Provider<FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder>() {
            @Override
            public FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder get() {
              return new HomeFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectC(
          instance, DaggerAppComponent.this.getMyClassProvider.get());
      MainActivity_MembersInjector.injectInfo(instance, getInfo());
      MainActivity_MembersInjector.injectInfo2(instance, getInfo2());
      MainActivity_MembersInjector.injectInfo3(instance, getInfo3());
      MainActivity_MembersInjector.injectP(instance, DaggerAppComponent.this.piProvider.get());
      MainActivity_MembersInjector.injectP2(instance, getInjectClass2());
      MainActivity_MembersInjector.injectA(
          instance, DaggerAppComponent.this.provideAwesomeManagerProvider.get());
      MainActivity_MembersInjector.injectA2(
          instance, DaggerAppComponent.this.provideAwesomeManager2Provider.get());
      MainActivity_MembersInjector.injectA3(instance, getAwesomeManager2());
      MainActivity_MembersInjector.injectViewModel(instance, getMainActivityViewModel());
      MainActivity_MembersInjector.injectUp(
          instance, DaggerAppComponent.this.provideUserPreferenceProvider.get());
      return instance;
    }

    private final class HomeFragmentSubcomponentBuilder
        extends FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent.Builder {
      private HomeFragment seedInstance;

      @Override
      public FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(HomeFragment.class.getCanonicalName() + " must be set");
        }
        return new HomeFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(HomeFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl
        implements FragmentModule_ContributeHomeFragment.HomeFragmentSubcomponent {
      private HomeFragmentSubcomponentImpl(HomeFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);
      }

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        HomeFragment_MembersInjector.injectInfo2(
            instance, MainActivitySubcomponentImpl.this.getInfo2());
        return instance;
      }
    }
  }
}
