// Generated by Dagger (https://google.github.io/dagger).
package com.example.testkotloin;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PreferenceModule_ProvideAwesomeManager2Factory implements Factory<A> {
  private final PreferenceModule module;

  private final Provider<Context> cProvider;

  public PreferenceModule_ProvideAwesomeManager2Factory(
      PreferenceModule module, Provider<Context> cProvider) {
    this.module = module;
    this.cProvider = cProvider;
  }

  @Override
  public A get() {
    return provideInstance(module, cProvider);
  }

  public static A provideInstance(PreferenceModule module, Provider<Context> cProvider) {
    return proxyProvideAwesomeManager2(module, cProvider.get());
  }

  public static PreferenceModule_ProvideAwesomeManager2Factory create(
      PreferenceModule module, Provider<Context> cProvider) {
    return new PreferenceModule_ProvideAwesomeManager2Factory(module, cProvider);
  }

  public static A proxyProvideAwesomeManager2(PreferenceModule instance, Context c) {
    return Preconditions.checkNotNull(
        instance.provideAwesomeManager2(c),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
